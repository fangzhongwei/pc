/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.jxjxgo.pc.rpc.domain

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object SignRequest extends ThriftStructCodec3[SignRequest] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("SignRequest")
  val IpField = new TField("ip", TType.I64, 1)
  val IpFieldManifest = implicitly[Manifest[Long]]
  val DeviceTypeField = new TField("deviceType", TType.I32, 2)
  val DeviceTypeFieldManifest = implicitly[Manifest[Int]]
  val FingerPrintField = new TField("fingerPrint", TType.STRING, 3)
  val FingerPrintFieldManifest = implicitly[Manifest[String]]
  val MemberIdField = new TField("memberId", TType.I64, 4)
  val MemberIdFieldManifest = implicitly[Manifest[Long]]
  val PaymentVoucherNoField = new TField("paymentVoucherNo", TType.STRING, 5)
  val PaymentVoucherNoFieldManifest = implicitly[Manifest[String]]
  val ChannelCodeField = new TField("channelCode", TType.STRING, 6)
  val ChannelCodeFieldManifest = implicitly[Manifest[String]]
  val AmountField = new TField("amount", TType.STRING, 7)
  val AmountFieldManifest = implicitly[Manifest[String]]
  val OrderSubmitTimeField = new TField("orderSubmitTime", TType.I64, 8)
  val OrderSubmitTimeFieldManifest = implicitly[Manifest[Long]]
  val Ext1Field = new TField("ext1", TType.STRING, 9)
  val Ext1FieldManifest = implicitly[Manifest[String]]
  val Ext2Field = new TField("ext2", TType.STRING, 10)
  val Ext2FieldManifest = implicitly[Manifest[String]]
  val Ext3Field = new TField("ext3", TType.STRING, 11)
  val Ext3FieldManifest = implicitly[Manifest[String]]
  val Ext4Field = new TField("ext4", TType.STRING, 12)
  val Ext4FieldManifest = implicitly[Manifest[String]]
  val Ext5Field = new TField("ext5", TType.STRING, 13)
  val Ext5FieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      IpField,
      false,
      false,
      IpFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      DeviceTypeField,
      false,
      false,
      DeviceTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      FingerPrintField,
      false,
      false,
      FingerPrintFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      MemberIdField,
      false,
      false,
      MemberIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      PaymentVoucherNoField,
      false,
      false,
      PaymentVoucherNoFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      ChannelCodeField,
      false,
      false,
      ChannelCodeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      AmountField,
      false,
      false,
      AmountFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      OrderSubmitTimeField,
      false,
      false,
      OrderSubmitTimeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      Ext1Field,
      false,
      false,
      Ext1FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      Ext2Field,
      false,
      false,
      Ext2FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      Ext3Field,
      false,
      false,
      Ext3FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      Ext4Field,
      false,
      false,
      Ext4FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      Ext5Field,
      false,
      false,
      Ext5FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: SignRequest): Unit = {
  }

  def withoutPassthroughFields(original: SignRequest): SignRequest =
    new Immutable(
      ip =
        {
          val field = original.ip
          field
        },
      deviceType =
        {
          val field = original.deviceType
          field
        },
      fingerPrint =
        {
          val field = original.fingerPrint
          field
        },
      memberId =
        {
          val field = original.memberId
          field
        },
      paymentVoucherNo =
        {
          val field = original.paymentVoucherNo
          field
        },
      channelCode =
        {
          val field = original.channelCode
          field
        },
      amount =
        {
          val field = original.amount
          field
        },
      orderSubmitTime =
        {
          val field = original.orderSubmitTime
          field
        },
      ext1 =
        {
          val field = original.ext1
          field
        },
      ext2 =
        {
          val field = original.ext2
          field
        },
      ext3 =
        {
          val field = original.ext3
          field
        },
      ext4 =
        {
          val field = original.ext4
          field
        },
      ext5 =
        {
          val field = original.ext5
          field
        }
    )

  override def encode(_item: SignRequest, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): SignRequest = {

    var ip: Long = 0L
    var deviceType: Int = 0
    var fingerPrintOffset: Int = -1
    var memberId: Long = 0L
    var paymentVoucherNoOffset: Int = -1
    var channelCodeOffset: Int = -1
    var amountOffset: Int = -1
    var orderSubmitTime: Long = 0L
    var ext1Offset: Int = -1
    var ext2Offset: Int = -1
    var ext3Offset: Int = -1
    var ext4Offset: Int = -1
    var ext5Offset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I64 =>
    
                ip = readIpValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'ip' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
    
                deviceType = readDeviceTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'deviceType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                fingerPrintOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'fingerPrint' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I64 =>
    
                memberId = readMemberIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                paymentVoucherNoOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'paymentVoucherNo' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                channelCodeOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'channelCode' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                amountOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'amount' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I64 =>
    
                orderSubmitTime = readOrderSubmitTimeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'orderSubmitTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.STRING =>
                ext1Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ext1' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.STRING =>
                ext2Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ext2' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 11 =>
            _field.`type` match {
              case TType.STRING =>
                ext3Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ext3' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 12 =>
            _field.`type` match {
              case TType.STRING =>
                ext4Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ext4' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 13 =>
            _field.`type` match {
              case TType.STRING =>
                ext5Offset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ext5' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      ip,
      deviceType,
      fingerPrintOffset,
      memberId,
      paymentVoucherNoOffset,
      channelCodeOffset,
      amountOffset,
      orderSubmitTime,
      ext1Offset,
      ext2Offset,
      ext3Offset,
      ext4Offset,
      ext5Offset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): SignRequest =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): SignRequest = {
    var ip: Long = 0L
    var deviceType: Int = 0
    var fingerPrint: String = ""
    var memberId: Long = 0L
    var paymentVoucherNo: String = ""
    var channelCode: String = ""
    var amount: String = ""
    var orderSubmitTime: Long = 0L
    var ext1: String = ""
    var ext2: String = ""
    var ext3: String = ""
    var ext4: String = ""
    var ext5: String = ""
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I64 =>
                ip = readIpValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'ip' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I32 =>
                deviceType = readDeviceTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'deviceType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                fingerPrint = readFingerPrintValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'fingerPrint' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I64 =>
                memberId = readMemberIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                paymentVoucherNo = readPaymentVoucherNoValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'paymentVoucherNo' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                channelCode = readChannelCodeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'channelCode' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                amount = readAmountValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'amount' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I64 =>
                orderSubmitTime = readOrderSubmitTimeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'orderSubmitTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.STRING =>
                ext1 = readExt1Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ext1' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.STRING =>
                ext2 = readExt2Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ext2' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 11 =>
            _field.`type` match {
              case TType.STRING =>
                ext3 = readExt3Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ext3' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 12 =>
            _field.`type` match {
              case TType.STRING =>
                ext4 = readExt4Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ext4' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 13 =>
            _field.`type` match {
              case TType.STRING =>
                ext5 = readExt5Value(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'ext5' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      ip,
      deviceType,
      fingerPrint,
      memberId,
      paymentVoucherNo,
      channelCode,
      amount,
      orderSubmitTime,
      ext1,
      ext2,
      ext3,
      ext4,
      ext5,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    ip: Long = 0L,
    deviceType: Int = 0,
    fingerPrint: String = "",
    memberId: Long = 0L,
    paymentVoucherNo: String = "",
    channelCode: String = "",
    amount: String = "",
    orderSubmitTime: Long = 0L,
    ext1: String = "",
    ext2: String = "",
    ext3: String = "",
    ext4: String = "",
    ext5: String = ""
  ): SignRequest =
    new Immutable(
      ip,
      deviceType,
      fingerPrint,
      memberId,
      paymentVoucherNo,
      channelCode,
      amount,
      orderSubmitTime,
      ext1,
      ext2,
      ext3,
      ext4,
      ext5
    )

  def unapply(_item: SignRequest): _root_.scala.Option[scala.Product13[Long, Int, String, Long, String, String, String, Long, String, String, String, String, String]] = _root_.scala.Some(_item)


  @inline private def readIpValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeIpField(ip_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IpField)
    writeIpValue(ip_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIpValue(ip_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(ip_item)
  }

  @inline private def readDeviceTypeValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeDeviceTypeField(deviceType_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DeviceTypeField)
    writeDeviceTypeValue(deviceType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDeviceTypeValue(deviceType_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(deviceType_item)
  }

  @inline private def readFingerPrintValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeFingerPrintField(fingerPrint_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FingerPrintField)
    writeFingerPrintValue(fingerPrint_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFingerPrintValue(fingerPrint_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(fingerPrint_item)
  }

  @inline private def readMemberIdValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeMemberIdField(memberId_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MemberIdField)
    writeMemberIdValue(memberId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMemberIdValue(memberId_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(memberId_item)
  }

  @inline private def readPaymentVoucherNoValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writePaymentVoucherNoField(paymentVoucherNo_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PaymentVoucherNoField)
    writePaymentVoucherNoValue(paymentVoucherNo_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePaymentVoucherNoValue(paymentVoucherNo_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(paymentVoucherNo_item)
  }

  @inline private def readChannelCodeValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeChannelCodeField(channelCode_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ChannelCodeField)
    writeChannelCodeValue(channelCode_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeChannelCodeValue(channelCode_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(channelCode_item)
  }

  @inline private def readAmountValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeAmountField(amount_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AmountField)
    writeAmountValue(amount_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAmountValue(amount_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(amount_item)
  }

  @inline private def readOrderSubmitTimeValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeOrderSubmitTimeField(orderSubmitTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OrderSubmitTimeField)
    writeOrderSubmitTimeValue(orderSubmitTime_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOrderSubmitTimeValue(orderSubmitTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(orderSubmitTime_item)
  }

  @inline private def readExt1Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeExt1Field(ext1_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(Ext1Field)
    writeExt1Value(ext1_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeExt1Value(ext1_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(ext1_item)
  }

  @inline private def readExt2Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeExt2Field(ext2_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(Ext2Field)
    writeExt2Value(ext2_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeExt2Value(ext2_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(ext2_item)
  }

  @inline private def readExt3Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeExt3Field(ext3_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(Ext3Field)
    writeExt3Value(ext3_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeExt3Value(ext3_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(ext3_item)
  }

  @inline private def readExt4Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeExt4Field(ext4_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(Ext4Field)
    writeExt4Value(ext4_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeExt4Value(ext4_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(ext4_item)
  }

  @inline private def readExt5Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeExt5Field(ext5_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(Ext5Field)
    writeExt5Value(ext5_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeExt5Value(ext5_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(ext5_item)
  }


  object Immutable extends ThriftStructCodec3[SignRequest] {
    override def encode(_item: SignRequest, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): SignRequest = SignRequest.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[SignRequest] = SignRequest.metaData
  }

  /**
   * The default read-only implementation of SignRequest.  You typically should not need to
   * directly reference this class; instead, use the SignRequest.apply method to construct
   * new instances.
   */
  class Immutable(
      val ip: Long,
      val deviceType: Int,
      val fingerPrint: String,
      val memberId: Long,
      val paymentVoucherNo: String,
      val channelCode: String,
      val amount: String,
      val orderSubmitTime: Long,
      val ext1: String,
      val ext2: String,
      val ext3: String,
      val ext4: String,
      val ext5: String,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends SignRequest {
    def this(
      ip: Long = 0L,
      deviceType: Int = 0,
      fingerPrint: String = "",
      memberId: Long = 0L,
      paymentVoucherNo: String = "",
      channelCode: String = "",
      amount: String = "",
      orderSubmitTime: Long = 0L,
      ext1: String = "",
      ext2: String = "",
      ext3: String = "",
      ext4: String = "",
      ext5: String = ""
    ) = this(
      ip,
      deviceType,
      fingerPrint,
      memberId,
      paymentVoucherNo,
      channelCode,
      amount,
      orderSubmitTime,
      ext1,
      ext2,
      ext3,
      ext4,
      ext5,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val ip: Long,
      val deviceType: Int,
      fingerPrintOffset: Int,
      val memberId: Long,
      paymentVoucherNoOffset: Int,
      channelCodeOffset: Int,
      amountOffset: Int,
      val orderSubmitTime: Long,
      ext1Offset: Int,
      ext2Offset: Int,
      ext3Offset: Int,
      ext4Offset: Int,
      ext5Offset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends SignRequest {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val fingerPrint: String =
      if (fingerPrintOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, fingerPrintOffset)
      }
    lazy val paymentVoucherNo: String =
      if (paymentVoucherNoOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, paymentVoucherNoOffset)
      }
    lazy val channelCode: String =
      if (channelCodeOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, channelCodeOffset)
      }
    lazy val amount: String =
      if (amountOffset == -1)
        ""
      else {
        _proto.decodeString(_buf, amountOffset)
      }
    lazy val ext1: String =
      if (ext1Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, ext1Offset)
      }
    lazy val ext2: String =
      if (ext2Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, ext2Offset)
      }
    lazy val ext3: String =
      if (ext3Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, ext3Offset)
      }
    lazy val ext4: String =
      if (ext4Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, ext4Offset)
      }
    lazy val ext5: String =
      if (ext5Offset == -1)
        ""
      else {
        _proto.decodeString(_buf, ext5Offset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the SignRequest trait with additional state or
   * behavior and implement the read-only methods from SignRequest using an underlying
   * instance.
   */
  trait Proxy extends SignRequest {
    protected def _underlying_SignRequest: SignRequest
    override def ip: Long = _underlying_SignRequest.ip
    override def deviceType: Int = _underlying_SignRequest.deviceType
    override def fingerPrint: String = _underlying_SignRequest.fingerPrint
    override def memberId: Long = _underlying_SignRequest.memberId
    override def paymentVoucherNo: String = _underlying_SignRequest.paymentVoucherNo
    override def channelCode: String = _underlying_SignRequest.channelCode
    override def amount: String = _underlying_SignRequest.amount
    override def orderSubmitTime: Long = _underlying_SignRequest.orderSubmitTime
    override def ext1: String = _underlying_SignRequest.ext1
    override def ext2: String = _underlying_SignRequest.ext2
    override def ext3: String = _underlying_SignRequest.ext3
    override def ext4: String = _underlying_SignRequest.ext4
    override def ext5: String = _underlying_SignRequest.ext5
    override def _passthroughFields = _underlying_SignRequest._passthroughFields
  }
}

trait SignRequest
  extends ThriftStruct
  with scala.Product13[Long, Int, String, Long, String, String, String, Long, String, String, String, String, String]
  with java.io.Serializable
{
  import SignRequest._

  def ip: Long
  def deviceType: Int
  def fingerPrint: String
  def memberId: Long
  def paymentVoucherNo: String
  def channelCode: String
  def amount: String
  def orderSubmitTime: Long
  def ext1: String
  def ext2: String
  def ext3: String
  def ext4: String
  def ext5: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = ip
  def _2 = deviceType
  def _3 = fingerPrint
  def _4 = memberId
  def _5 = paymentVoucherNo
  def _6 = channelCode
  def _7 = amount
  def _8 = orderSubmitTime
  def _9 = ext1
  def _10 = ext2
  def _11 = ext3
  def _12 = ext4
  def _13 = ext5


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeIpValue(ip, _oprot)
                _root_.scala.Some(SignRequest.IpField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeDeviceTypeValue(deviceType, _oprot)
                _root_.scala.Some(SignRequest.DeviceTypeField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (fingerPrint ne null) {
                writeFingerPrintValue(fingerPrint, _oprot)
                _root_.scala.Some(SignRequest.FingerPrintField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeMemberIdValue(memberId, _oprot)
                _root_.scala.Some(SignRequest.MemberIdField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (paymentVoucherNo ne null) {
                writePaymentVoucherNoValue(paymentVoucherNo, _oprot)
                _root_.scala.Some(SignRequest.PaymentVoucherNoField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (channelCode ne null) {
                writeChannelCodeValue(channelCode, _oprot)
                _root_.scala.Some(SignRequest.ChannelCodeField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (amount ne null) {
                writeAmountValue(amount, _oprot)
                _root_.scala.Some(SignRequest.AmountField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (true) {
                writeOrderSubmitTimeValue(orderSubmitTime, _oprot)
                _root_.scala.Some(SignRequest.OrderSubmitTimeField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (ext1 ne null) {
                writeExt1Value(ext1, _oprot)
                _root_.scala.Some(SignRequest.Ext1Field)
              } else {
                _root_.scala.None
              }
            case 10 =>
              if (ext2 ne null) {
                writeExt2Value(ext2, _oprot)
                _root_.scala.Some(SignRequest.Ext2Field)
              } else {
                _root_.scala.None
              }
            case 11 =>
              if (ext3 ne null) {
                writeExt3Value(ext3, _oprot)
                _root_.scala.Some(SignRequest.Ext3Field)
              } else {
                _root_.scala.None
              }
            case 12 =>
              if (ext4 ne null) {
                writeExt4Value(ext4, _oprot)
                _root_.scala.Some(SignRequest.Ext4Field)
              } else {
                _root_.scala.None
              }
            case 13 =>
              if (ext5 ne null) {
                writeExt5Value(ext5, _oprot)
                _root_.scala.Some(SignRequest.Ext5Field)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): SignRequest = {
    var ip: Long = this.ip
    var deviceType: Int = this.deviceType
    var fingerPrint: String = this.fingerPrint
    var memberId: Long = this.memberId
    var paymentVoucherNo: String = this.paymentVoucherNo
    var channelCode: String = this.channelCode
    var amount: String = this.amount
    var orderSubmitTime: Long = this.orderSubmitTime
    var ext1: String = this.ext1
    var ext2: String = this.ext2
    var ext3: String = this.ext3
    var ext4: String = this.ext4
    var ext5: String = this.ext5
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        ip = readIpValue(_blob.read)
      case 2 =>
        deviceType = readDeviceTypeValue(_blob.read)
      case 3 =>
        fingerPrint = readFingerPrintValue(_blob.read)
      case 4 =>
        memberId = readMemberIdValue(_blob.read)
      case 5 =>
        paymentVoucherNo = readPaymentVoucherNoValue(_blob.read)
      case 6 =>
        channelCode = readChannelCodeValue(_blob.read)
      case 7 =>
        amount = readAmountValue(_blob.read)
      case 8 =>
        orderSubmitTime = readOrderSubmitTimeValue(_blob.read)
      case 9 =>
        ext1 = readExt1Value(_blob.read)
      case 10 =>
        ext2 = readExt2Value(_blob.read)
      case 11 =>
        ext3 = readExt3Value(_blob.read)
      case 12 =>
        ext4 = readExt4Value(_blob.read)
      case 13 =>
        ext5 = readExt5Value(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      ip,
      deviceType,
      fingerPrint,
      memberId,
      paymentVoucherNo,
      channelCode,
      amount,
      orderSubmitTime,
      ext1,
      ext2,
      ext3,
      ext4,
      ext5,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): SignRequest = {
    var ip: Long = this.ip
    var deviceType: Int = this.deviceType
    var fingerPrint: String = this.fingerPrint
    var memberId: Long = this.memberId
    var paymentVoucherNo: String = this.paymentVoucherNo
    var channelCode: String = this.channelCode
    var amount: String = this.amount
    var orderSubmitTime: Long = this.orderSubmitTime
    var ext1: String = this.ext1
    var ext2: String = this.ext2
    var ext3: String = this.ext3
    var ext4: String = this.ext4
    var ext5: String = this.ext5

    _fieldId match {
      case 1 =>
        ip = 0L
      case 2 =>
        deviceType = 0
      case 3 =>
        fingerPrint = ""
      case 4 =>
        memberId = 0L
      case 5 =>
        paymentVoucherNo = ""
      case 6 =>
        channelCode = ""
      case 7 =>
        amount = ""
      case 8 =>
        orderSubmitTime = 0L
      case 9 =>
        ext1 = ""
      case 10 =>
        ext2 = ""
      case 11 =>
        ext3 = ""
      case 12 =>
        ext4 = ""
      case 13 =>
        ext5 = ""
      case _ =>
    }
    new Immutable(
      ip,
      deviceType,
      fingerPrint,
      memberId,
      paymentVoucherNo,
      channelCode,
      amount,
      orderSubmitTime,
      ext1,
      ext2,
      ext3,
      ext4,
      ext5,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetIp: SignRequest = unsetField(1)

  def unsetDeviceType: SignRequest = unsetField(2)

  def unsetFingerPrint: SignRequest = unsetField(3)

  def unsetMemberId: SignRequest = unsetField(4)

  def unsetPaymentVoucherNo: SignRequest = unsetField(5)

  def unsetChannelCode: SignRequest = unsetField(6)

  def unsetAmount: SignRequest = unsetField(7)

  def unsetOrderSubmitTime: SignRequest = unsetField(8)

  def unsetExt1: SignRequest = unsetField(9)

  def unsetExt2: SignRequest = unsetField(10)

  def unsetExt3: SignRequest = unsetField(11)

  def unsetExt4: SignRequest = unsetField(12)

  def unsetExt5: SignRequest = unsetField(13)


  override def write(_oprot: TProtocol): Unit = {
    SignRequest.validate(this)
    _oprot.writeStructBegin(Struct)
    writeIpField(ip, _oprot)
    writeDeviceTypeField(deviceType, _oprot)
    if (fingerPrint ne null) writeFingerPrintField(fingerPrint, _oprot)
    writeMemberIdField(memberId, _oprot)
    if (paymentVoucherNo ne null) writePaymentVoucherNoField(paymentVoucherNo, _oprot)
    if (channelCode ne null) writeChannelCodeField(channelCode, _oprot)
    if (amount ne null) writeAmountField(amount, _oprot)
    writeOrderSubmitTimeField(orderSubmitTime, _oprot)
    if (ext1 ne null) writeExt1Field(ext1, _oprot)
    if (ext2 ne null) writeExt2Field(ext2, _oprot)
    if (ext3 ne null) writeExt3Field(ext3, _oprot)
    if (ext4 ne null) writeExt4Field(ext4, _oprot)
    if (ext5 ne null) writeExt5Field(ext5, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    ip: Long = this.ip,
    deviceType: Int = this.deviceType,
    fingerPrint: String = this.fingerPrint,
    memberId: Long = this.memberId,
    paymentVoucherNo: String = this.paymentVoucherNo,
    channelCode: String = this.channelCode,
    amount: String = this.amount,
    orderSubmitTime: Long = this.orderSubmitTime,
    ext1: String = this.ext1,
    ext2: String = this.ext2,
    ext3: String = this.ext3,
    ext4: String = this.ext4,
    ext5: String = this.ext5,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): SignRequest =
    new Immutable(
      ip,
      deviceType,
      fingerPrint,
      memberId,
      paymentVoucherNo,
      channelCode,
      amount,
      orderSubmitTime,
      ext1,
      ext2,
      ext3,
      ext4,
      ext5,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[SignRequest]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[SignRequest]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 13

  override def productElement(n: Int): Any = n match {
    case 0 => this.ip
    case 1 => this.deviceType
    case 2 => this.fingerPrint
    case 3 => this.memberId
    case 4 => this.paymentVoucherNo
    case 5 => this.channelCode
    case 6 => this.amount
    case 7 => this.orderSubmitTime
    case 8 => this.ext1
    case 9 => this.ext2
    case 10 => this.ext3
    case 11 => this.ext4
    case 12 => this.ext5
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "SignRequest"
}